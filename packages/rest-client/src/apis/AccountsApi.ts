/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountResponseDto,
  AccountsControllerConnect200Response,
  CreateAccountDto,
  UpdateAccountDto,
} from '../models/index';
import {
    AccountResponseDtoFromJSON,
    AccountResponseDtoToJSON,
    AccountsControllerConnect200ResponseFromJSON,
    AccountsControllerConnect200ResponseToJSON,
    CreateAccountDtoFromJSON,
    CreateAccountDtoToJSON,
    UpdateAccountDtoFromJSON,
    UpdateAccountDtoToJSON,
} from '../models/index';

export interface AccountsControllerConnectRequest {
    id: string;
    body?: object;
}

export interface AccountsControllerConnectCallbackRequest {
    token: string;
    code: string;
}

export interface AccountsControllerCreateRequest {
    createAccountDto: CreateAccountDto;
}

export interface AccountsControllerFindOneRequest {
    id: string;
}

export interface AccountsControllerRemoveRequest {
    id: string;
}

export interface AccountsControllerUpdateRequest {
    id: string;
    updateAccountDto: UpdateAccountDto;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Initiate Mastodon OAuth connection for an account
     */
    async accountsControllerConnectRaw(requestParameters: AccountsControllerConnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsControllerConnect200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountsControllerConnect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{id}/connect`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsControllerConnect200ResponseFromJSON(jsonValue));
    }

    /**
     * Initiate Mastodon OAuth connection for an account
     */
    async accountsControllerConnect(requestParameters: AccountsControllerConnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsControllerConnect200Response> {
        const response = await this.accountsControllerConnectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handle Mastodon OAuth callback
     */
    async accountsControllerConnectCallbackRaw(requestParameters: AccountsControllerConnectCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling accountsControllerConnectCallback().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling accountsControllerConnectCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/connect/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Handle Mastodon OAuth callback
     */
    async accountsControllerConnectCallback(requestParameters: AccountsControllerConnectCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountsControllerConnectCallbackRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new Mastodon account configuration
     */
    async accountsControllerCreateRaw(requestParameters: AccountsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponseDto>> {
        if (requestParameters['createAccountDto'] == null) {
            throw new runtime.RequiredError(
                'createAccountDto',
                'Required parameter "createAccountDto" was null or undefined when calling accountsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountDtoToJSON(requestParameters['createAccountDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Mastodon account configuration
     */
    async accountsControllerCreate(requestParameters: AccountsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponseDto> {
        const response = await this.accountsControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all of the authenticated user\'s Mastodon account configurations
     */
    async accountsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccountResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountResponseDtoFromJSON));
    }

    /**
     * Get all of the authenticated user\'s Mastodon account configurations
     */
    async accountsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccountResponseDto>> {
        const response = await this.accountsControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a specific Mastodon account configuration by ID
     */
    async accountsControllerFindOneRaw(requestParameters: AccountsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get a specific Mastodon account configuration by ID
     */
    async accountsControllerFindOne(requestParameters: AccountsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponseDto> {
        const response = await this.accountsControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Mastodon account configuration
     */
    async accountsControllerRemoveRaw(requestParameters: AccountsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Mastodon account configuration
     */
    async accountsControllerRemove(requestParameters: AccountsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountsControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a Mastodon account configuration
     */
    async accountsControllerUpdateRaw(requestParameters: AccountsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accountsControllerUpdate().'
            );
        }

        if (requestParameters['updateAccountDto'] == null) {
            throw new runtime.RequiredError(
                'updateAccountDto',
                'Required parameter "updateAccountDto" was null or undefined when calling accountsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountDtoToJSON(requestParameters['updateAccountDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update a Mastodon account configuration
     */
    async accountsControllerUpdate(requestParameters: AccountsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponseDto> {
        const response = await this.accountsControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

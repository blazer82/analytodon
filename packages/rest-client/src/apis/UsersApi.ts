/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDto,
  ManageSubscriptionDto,
  SendEmailDto,
  UpdateUserDto,
  UserResponseDto,
} from '../models/index';
import {
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    ManageSubscriptionDtoFromJSON,
    ManageSubscriptionDtoToJSON,
    SendEmailDtoFromJSON,
    SendEmailDtoToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models/index';

export interface UsersControllerCreateUserRequest {
    createUserDto: CreateUserDto;
}

export interface UsersControllerFindUserByIdRequest {
    id: string;
}

export interface UsersControllerSendEmailToUsersRequest {
    sendEmailDto: SendEmailDto;
}

export interface UsersControllerSubscribeRequest {
    type: string;
    manageSubscriptionDto: ManageSubscriptionDto;
}

export interface UsersControllerUnsubscribeRequest {
    type: string;
    manageSubscriptionDto: ManageSubscriptionDto;
}

export interface UsersControllerUpdateUserRequest {
    id: string;
    updateUserDto: UpdateUserDto;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create a new user (Admin)
     */
    async usersControllerCreateUserRaw(requestParameters: UsersControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['createUserDto'] == null) {
            throw new runtime.RequiredError(
                'createUserDto',
                'Required parameter "createUserDto" was null or undefined when calling usersControllerCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters['createUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new user (Admin)
     */
    async usersControllerCreateUser(requestParameters: UsersControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.usersControllerCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all users (Admin)
     */
    async usersControllerFindAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseDtoFromJSON));
    }

    /**
     * Get a list of all users (Admin)
     */
    async usersControllerFindAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponseDto>> {
        const response = await this.usersControllerFindAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user details by ID (Admin)
     */
    async usersControllerFindUserByIdRaw(requestParameters: UsersControllerFindUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersControllerFindUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get user details by ID (Admin)
     */
    async usersControllerFindUserById(requestParameters: UsersControllerFindUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.usersControllerFindUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email to a group of users (Admin)
     */
    async usersControllerSendEmailToUsersRaw(requestParameters: UsersControllerSendEmailToUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sendEmailDto'] == null) {
            throw new runtime.RequiredError(
                'sendEmailDto',
                'Required parameter "sendEmailDto" was null or undefined when calling usersControllerSendEmailToUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/send-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailDtoToJSON(requestParameters['sendEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send an email to a group of users (Admin)
     */
    async usersControllerSendEmailToUsers(requestParameters: UsersControllerSendEmailToUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersControllerSendEmailToUsersRaw(requestParameters, initOverrides);
    }

    /**
     * Subscribe user to an email list type
     */
    async usersControllerSubscribeRaw(requestParameters: UsersControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling usersControllerSubscribe().'
            );
        }

        if (requestParameters['manageSubscriptionDto'] == null) {
            throw new runtime.RequiredError(
                'manageSubscriptionDto',
                'Required parameter "manageSubscriptionDto" was null or undefined when calling usersControllerSubscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/subscribe/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageSubscriptionDtoToJSON(requestParameters['manageSubscriptionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Subscribe user to an email list type
     */
    async usersControllerSubscribe(requestParameters: UsersControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersControllerSubscribeRaw(requestParameters, initOverrides);
    }

    /**
     * Unsubscribe user from an email list type
     */
    async usersControllerUnsubscribeRaw(requestParameters: UsersControllerUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling usersControllerUnsubscribe().'
            );
        }

        if (requestParameters['manageSubscriptionDto'] == null) {
            throw new runtime.RequiredError(
                'manageSubscriptionDto',
                'Required parameter "manageSubscriptionDto" was null or undefined when calling usersControllerUnsubscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/unsubscribe/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageSubscriptionDtoToJSON(requestParameters['manageSubscriptionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unsubscribe user from an email list type
     */
    async usersControllerUnsubscribe(requestParameters: UsersControllerUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersControllerUnsubscribeRaw(requestParameters, initOverrides);
    }

    /**
     * Update user details by ID (Admin)
     */
    async usersControllerUpdateUserRaw(requestParameters: UsersControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersControllerUpdateUser().'
            );
        }

        if (requestParameters['updateUserDto'] == null) {
            throw new runtime.RequiredError(
                'updateUserDto',
                'Required parameter "updateUserDto" was null or undefined when calling usersControllerUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters['updateUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update user details by ID (Admin)
     */
    async usersControllerUpdateUser(requestParameters: UsersControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.usersControllerUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChartDataPointDto,
  FavoritedTootDto,
  FavoritesKpiDto,
  TotalSnapshotDto,
} from '../models/index';
import {
    ChartDataPointDtoFromJSON,
    ChartDataPointDtoToJSON,
    FavoritedTootDtoFromJSON,
    FavoritedTootDtoToJSON,
    FavoritesKpiDtoFromJSON,
    FavoritesKpiDtoToJSON,
    TotalSnapshotDtoFromJSON,
    TotalSnapshotDtoToJSON,
} from '../models/index';

export interface FavoritesControllerExportCsvRequest {
    accountId: string;
    timeframe: string;
}

export interface FavoritesControllerGetChartDataRequest {
    accountId: string;
    timeframe: string;
}

export interface FavoritesControllerGetMonthlyKpiRequest {
    accountId: string;
}

export interface FavoritesControllerGetTopTootsByFavoritesRequest {
    accountId: string;
    timeframe: string;
}

export interface FavoritesControllerGetTotalSnapshotRequest {
    accountId: string;
}

export interface FavoritesControllerGetWeeklyKpiRequest {
    accountId: string;
}

export interface FavoritesControllerGetYearlyKpiRequest {
    accountId: string;
}

/**
 * 
 */
export class FavoritesApi extends runtime.BaseAPI {

    /**
     * Export favorites data as CSV for an account over a specified timeframe
     */
    async favoritesControllerExportCsvRaw(requestParameters: FavoritesControllerExportCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerExportCsv().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling favoritesControllerExportCsv().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/csv`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export favorites data as CSV for an account over a specified timeframe
     */
    async favoritesControllerExportCsv(requestParameters: FavoritesControllerExportCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.favoritesControllerExportCsvRaw(requestParameters, initOverrides);
    }

    /**
     * Get chart data for an account\'s favorites over a specified timeframe
     */
    async favoritesControllerGetChartDataRaw(requestParameters: FavoritesControllerGetChartDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChartDataPointDto>>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetChartData().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling favoritesControllerGetChartData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/chart`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartDataPointDtoFromJSON));
    }

    /**
     * Get chart data for an account\'s favorites over a specified timeframe
     */
    async favoritesControllerGetChartData(requestParameters: FavoritesControllerGetChartDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChartDataPointDto>> {
        const response = await this.favoritesControllerGetChartDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get monthly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetMonthlyKpiRaw(requestParameters: FavoritesControllerGetMonthlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FavoritesKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetMonthlyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/kpi/monthly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FavoritesKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get monthly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetMonthlyKpi(requestParameters: FavoritesControllerGetMonthlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FavoritesKpiDto> {
        const response = await this.favoritesControllerGetMonthlyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get top toots by favorites for an account over a specified timeframe
     */
    async favoritesControllerGetTopTootsByFavoritesRaw(requestParameters: FavoritesControllerGetTopTootsByFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FavoritedTootDto>>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetTopTootsByFavorites().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling favoritesControllerGetTopTootsByFavorites().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/top-toots`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FavoritedTootDtoFromJSON));
    }

    /**
     * Get top toots by favorites for an account over a specified timeframe
     */
    async favoritesControllerGetTopTootsByFavorites(requestParameters: FavoritesControllerGetTopTootsByFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FavoritedTootDto>> {
        const response = await this.favoritesControllerGetTopTootsByFavoritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get total snapshot of an account\'s favorites
     */
    async favoritesControllerGetTotalSnapshotRaw(requestParameters: FavoritesControllerGetTotalSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TotalSnapshotDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetTotalSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/kpi/total`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotalSnapshotDtoFromJSON(jsonValue));
    }

    /**
     * Get total snapshot of an account\'s favorites
     */
    async favoritesControllerGetTotalSnapshot(requestParameters: FavoritesControllerGetTotalSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TotalSnapshotDto> {
        const response = await this.favoritesControllerGetTotalSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get weekly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetWeeklyKpiRaw(requestParameters: FavoritesControllerGetWeeklyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FavoritesKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetWeeklyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/kpi/weekly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FavoritesKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get weekly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetWeeklyKpi(requestParameters: FavoritesControllerGetWeeklyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FavoritesKpiDto> {
        const response = await this.favoritesControllerGetWeeklyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get yearly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetYearlyKpiRaw(requestParameters: FavoritesControllerGetYearlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FavoritesKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling favoritesControllerGetYearlyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/favorites/kpi/yearly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FavoritesKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get yearly Key Performance Indicators (KPIs) for an account\'s favorites
     */
    async favoritesControllerGetYearlyKpi(requestParameters: FavoritesControllerGetYearlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FavoritesKpiDto> {
        const response = await this.favoritesControllerGetYearlyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

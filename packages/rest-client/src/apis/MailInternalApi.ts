/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FirstStatsMailDto,
  OldAccountMailDto,
  WeeklyStatsMailDto,
} from '../models/index';
import {
    FirstStatsMailDtoFromJSON,
    FirstStatsMailDtoToJSON,
    OldAccountMailDtoFromJSON,
    OldAccountMailDtoToJSON,
    WeeklyStatsMailDtoFromJSON,
    WeeklyStatsMailDtoToJSON,
} from '../models/index';

export interface MailControllerSendFirstStatsMailRequest {
    firstStatsMailDto: FirstStatsMailDto;
}

export interface MailControllerSendOldAccountWarningMailRequest {
    oldAccountMailDto: OldAccountMailDto;
}

export interface MailControllerSendWeeklyStatsMailRequest {
    weeklyStatsMailDto: WeeklyStatsMailDto;
}

/**
 * 
 */
export class MailInternalApi extends runtime.BaseAPI {

    /**
     * Called by a worker or scheduler when first stats for an account are ready. This endpoint is intended for internal use.
     * Trigger \"First Stats Available\" email (internal)
     */
    async mailControllerSendFirstStatsMailRaw(requestParameters: MailControllerSendFirstStatsMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['firstStatsMailDto'] == null) {
            throw new runtime.RequiredError(
                'firstStatsMailDto',
                'Required parameter "firstStatsMailDto" was null or undefined when calling mailControllerSendFirstStatsMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/mail/first-stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FirstStatsMailDtoToJSON(requestParameters['firstStatsMailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Called by a worker or scheduler when first stats for an account are ready. This endpoint is intended for internal use.
     * Trigger \"First Stats Available\" email (internal)
     */
    async mailControllerSendFirstStatsMail(requestParameters: MailControllerSendFirstStatsMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mailControllerSendFirstStatsMailRaw(requestParameters, initOverrides);
    }

    /**
     * Called by a worker or scheduler for inactive accounts. This endpoint is intended for internal use.
     * Trigger \"Old Account Warning\" email (internal)
     */
    async mailControllerSendOldAccountWarningMailRaw(requestParameters: MailControllerSendOldAccountWarningMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oldAccountMailDto'] == null) {
            throw new runtime.RequiredError(
                'oldAccountMailDto',
                'Required parameter "oldAccountMailDto" was null or undefined when calling mailControllerSendOldAccountWarningMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/mail/old-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OldAccountMailDtoToJSON(requestParameters['oldAccountMailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Called by a worker or scheduler for inactive accounts. This endpoint is intended for internal use.
     * Trigger \"Old Account Warning\" email (internal)
     */
    async mailControllerSendOldAccountWarningMail(requestParameters: MailControllerSendOldAccountWarningMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mailControllerSendOldAccountWarningMailRaw(requestParameters, initOverrides);
    }

    /**
     * Called by a worker or scheduler to send weekly stats. This endpoint is intended for internal use.
     * Trigger \"Weekly Stats\" email (internal)
     */
    async mailControllerSendWeeklyStatsMailRaw(requestParameters: MailControllerSendWeeklyStatsMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['weeklyStatsMailDto'] == null) {
            throw new runtime.RequiredError(
                'weeklyStatsMailDto',
                'Required parameter "weeklyStatsMailDto" was null or undefined when calling mailControllerSendWeeklyStatsMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/mail/weekly-stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WeeklyStatsMailDtoToJSON(requestParameters['weeklyStatsMailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Called by a worker or scheduler to send weekly stats. This endpoint is intended for internal use.
     * Trigger \"Weekly Stats\" email (internal)
     */
    async mailControllerSendWeeklyStatsMail(requestParameters: MailControllerSendWeeklyStatsMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mailControllerSendWeeklyStatsMailRaw(requestParameters, initOverrides);
    }

}

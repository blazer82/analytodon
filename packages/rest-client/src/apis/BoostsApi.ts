/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoostedTootDto,
  BoostsKpiDto,
  ChartDataPointDto,
  TotalSnapshotDto,
} from '../models/index';
import {
    BoostedTootDtoFromJSON,
    BoostedTootDtoToJSON,
    BoostsKpiDtoFromJSON,
    BoostsKpiDtoToJSON,
    ChartDataPointDtoFromJSON,
    ChartDataPointDtoToJSON,
    TotalSnapshotDtoFromJSON,
    TotalSnapshotDtoToJSON,
} from '../models/index';

export interface BoostsControllerExportCsvRequest {
    accountId: string;
    timeframe: string;
}

export interface BoostsControllerGetChartDataRequest {
    accountId: string;
    timeframe: string;
}

export interface BoostsControllerGetMonthlyKpiRequest {
    accountId: string;
}

export interface BoostsControllerGetTopTootsByBoostsRequest {
    accountId: string;
    timeframe: string;
}

export interface BoostsControllerGetTotalSnapshotRequest {
    accountId: string;
}

export interface BoostsControllerGetWeeklyKpiRequest {
    accountId: string;
}

export interface BoostsControllerGetYearlyKpiRequest {
    accountId: string;
}

/**
 * 
 */
export class BoostsApi extends runtime.BaseAPI {

    /**
     * Export boosts data as CSV for an account over a specified timeframe
     */
    async boostsControllerExportCsvRaw(requestParameters: BoostsControllerExportCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerExportCsv().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling boostsControllerExportCsv().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/csv`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export boosts data as CSV for an account over a specified timeframe
     */
    async boostsControllerExportCsv(requestParameters: BoostsControllerExportCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.boostsControllerExportCsvRaw(requestParameters, initOverrides);
    }

    /**
     * Get chart data for an account\'s boosts over a specified timeframe
     */
    async boostsControllerGetChartDataRaw(requestParameters: BoostsControllerGetChartDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChartDataPointDto>>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetChartData().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling boostsControllerGetChartData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/chart`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartDataPointDtoFromJSON));
    }

    /**
     * Get chart data for an account\'s boosts over a specified timeframe
     */
    async boostsControllerGetChartData(requestParameters: BoostsControllerGetChartDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChartDataPointDto>> {
        const response = await this.boostsControllerGetChartDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get monthly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetMonthlyKpiRaw(requestParameters: BoostsControllerGetMonthlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoostsKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetMonthlyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/kpi/monthly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoostsKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get monthly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetMonthlyKpi(requestParameters: BoostsControllerGetMonthlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoostsKpiDto> {
        const response = await this.boostsControllerGetMonthlyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get top toots by boosts for an account over a specified timeframe
     */
    async boostsControllerGetTopTootsByBoostsRaw(requestParameters: BoostsControllerGetTopTootsByBoostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BoostedTootDto>>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetTopTootsByBoosts().'
            );
        }

        if (requestParameters['timeframe'] == null) {
            throw new runtime.RequiredError(
                'timeframe',
                'Required parameter "timeframe" was null or undefined when calling boostsControllerGetTopTootsByBoosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/top-toots`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoostedTootDtoFromJSON));
    }

    /**
     * Get top toots by boosts for an account over a specified timeframe
     */
    async boostsControllerGetTopTootsByBoosts(requestParameters: BoostsControllerGetTopTootsByBoostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BoostedTootDto>> {
        const response = await this.boostsControllerGetTopTootsByBoostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get total snapshot of an account\'s boosts
     */
    async boostsControllerGetTotalSnapshotRaw(requestParameters: BoostsControllerGetTotalSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TotalSnapshotDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetTotalSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/kpi/total`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotalSnapshotDtoFromJSON(jsonValue));
    }

    /**
     * Get total snapshot of an account\'s boosts
     */
    async boostsControllerGetTotalSnapshot(requestParameters: BoostsControllerGetTotalSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TotalSnapshotDto> {
        const response = await this.boostsControllerGetTotalSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get weekly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetWeeklyKpiRaw(requestParameters: BoostsControllerGetWeeklyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoostsKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetWeeklyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/kpi/weekly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoostsKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get weekly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetWeeklyKpi(requestParameters: BoostsControllerGetWeeklyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoostsKpiDto> {
        const response = await this.boostsControllerGetWeeklyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get yearly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetYearlyKpiRaw(requestParameters: BoostsControllerGetYearlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoostsKpiDto>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling boostsControllerGetYearlyKpi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/boosts/kpi/yearly`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoostsKpiDtoFromJSON(jsonValue));
    }

    /**
     * Get yearly Key Performance Indicators (KPIs) for an account\'s boosts
     */
    async boostsControllerGetYearlyKpi(requestParameters: BoostsControllerGetYearlyKpiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoostsKpiDto> {
        const response = await this.boostsControllerGetYearlyKpiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

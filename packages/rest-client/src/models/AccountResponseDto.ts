/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AccountResponseDto
 */
export interface AccountResponseDto {
    /**
     * Account ID
     * @type {string}
     * @memberof AccountResponseDto
     */
    id: string;
    /**
     * Mastodon server URL
     * @type {string}
     * @memberof AccountResponseDto
     */
    serverURL: string;
    /**
     * Account display name
     * @type {string}
     * @memberof AccountResponseDto
     */
    name?: string;
    /**
     * Mastodon username
     * @type {string}
     * @memberof AccountResponseDto
     */
    username?: string;
    /**
     * Full account name
     * @type {string}
     * @memberof AccountResponseDto
     */
    accountName?: string;
    /**
     * Mastodon account URL
     * @type {string}
     * @memberof AccountResponseDto
     */
    accountURL?: string;
    /**
     * Avatar URL
     * @type {string}
     * @memberof AccountResponseDto
     */
    avatarURL?: string;
    /**
     * Is the account currently active?
     * @type {boolean}
     * @memberof AccountResponseDto
     */
    isActive: boolean;
    /**
     * Has the account setup been completed?
     * @type {boolean}
     * @memberof AccountResponseDto
     */
    setupComplete: boolean;
    /**
     * Timezone of the account
     * @type {string}
     * @memberof AccountResponseDto
     */
    timezone: string;
    /**
     * OAuth scopes granted
     * @type {Array<string>}
     * @memberof AccountResponseDto
     */
    requestedScope?: Array<string>;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof AccountResponseDto
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof AccountResponseDto
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the AccountResponseDto interface.
 */
export function instanceOfAccountResponseDto(value: object): value is AccountResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('serverURL' in value) || value['serverURL'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('setupComplete' in value) || value['setupComplete'] === undefined) return false;
    if (!('timezone' in value) || value['timezone'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function AccountResponseDtoFromJSON(json: any): AccountResponseDto {
    return AccountResponseDtoFromJSONTyped(json, false);
}

export function AccountResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'serverURL': json['serverURL'],
        'name': json['name'] == null ? undefined : json['name'],
        'username': json['username'] == null ? undefined : json['username'],
        'accountName': json['accountName'] == null ? undefined : json['accountName'],
        'accountURL': json['accountURL'] == null ? undefined : json['accountURL'],
        'avatarURL': json['avatarURL'] == null ? undefined : json['avatarURL'],
        'isActive': json['isActive'],
        'setupComplete': json['setupComplete'],
        'timezone': json['timezone'],
        'requestedScope': json['requestedScope'] == null ? undefined : json['requestedScope'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function AccountResponseDtoToJSON(json: any): AccountResponseDto {
    return AccountResponseDtoToJSONTyped(json, false);
}

export function AccountResponseDtoToJSONTyped(value?: AccountResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'serverURL': value['serverURL'],
        'name': value['name'],
        'username': value['username'],
        'accountName': value['accountName'],
        'accountURL': value['accountURL'],
        'avatarURL': value['avatarURL'],
        'isActive': value['isActive'],
        'setupComplete': value['setupComplete'],
        'timezone': value['timezone'],
        'requestedScope': value['requestedScope'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Analytodon API
 * This is the API documentation for Analytodon - the open-source Mastodon analytics tool.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SessionAccountDto } from './SessionAccountDto';
import {
    SessionAccountDtoFromJSON,
    SessionAccountDtoFromJSONTyped,
    SessionAccountDtoToJSON,
    SessionAccountDtoToJSONTyped,
} from './SessionAccountDto';

/**
 * 
 * @export
 * @interface SessionUserDto
 */
export interface SessionUserDto {
    /**
     * User ID
     * @type {string}
     * @memberof SessionUserDto
     */
    id: string;
    /**
     * User role
     * @type {string}
     * @memberof SessionUserDto
     */
    role: string;
    /**
     * User email address
     * @type {string}
     * @memberof SessionUserDto
     */
    email: string;
    /**
     * Whether the email has been verified
     * @type {boolean}
     * @memberof SessionUserDto
     */
    emailVerified: boolean;
    /**
     * User accounts
     * @type {Array<SessionAccountDto>}
     * @memberof SessionUserDto
     */
    accounts: Array<SessionAccountDto>;
    /**
     * Maximum number of accounts allowed
     * @type {number}
     * @memberof SessionUserDto
     */
    maxAccounts: number;
    /**
     * Server URL used during signup
     * @type {string}
     * @memberof SessionUserDto
     */
    serverURLOnSignUp: string;
    /**
     * User timezone
     * @type {string}
     * @memberof SessionUserDto
     */
    timezone: string;
}

/**
 * Check if a given object implements the SessionUserDto interface.
 */
export function instanceOfSessionUserDto(value: object): value is SessionUserDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVerified' in value) || value['emailVerified'] === undefined) return false;
    if (!('accounts' in value) || value['accounts'] === undefined) return false;
    if (!('maxAccounts' in value) || value['maxAccounts'] === undefined) return false;
    if (!('serverURLOnSignUp' in value) || value['serverURLOnSignUp'] === undefined) return false;
    if (!('timezone' in value) || value['timezone'] === undefined) return false;
    return true;
}

export function SessionUserDtoFromJSON(json: any): SessionUserDto {
    return SessionUserDtoFromJSONTyped(json, false);
}

export function SessionUserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionUserDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'role': json['role'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'accounts': ((json['accounts'] as Array<any>).map(SessionAccountDtoFromJSON)),
        'maxAccounts': json['maxAccounts'],
        'serverURLOnSignUp': json['serverURLOnSignUp'],
        'timezone': json['timezone'],
    };
}

export function SessionUserDtoToJSON(json: any): SessionUserDto {
    return SessionUserDtoToJSONTyped(json, false);
}

export function SessionUserDtoToJSONTyped(value?: SessionUserDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'role': value['role'],
        'email': value['email'],
        'emailVerified': value['emailVerified'],
        'accounts': ((value['accounts'] as Array<any>).map(SessionAccountDtoToJSON)),
        'maxAccounts': value['maxAccounts'],
        'serverURLOnSignUp': value['serverURLOnSignUp'],
        'timezone': value['timezone'],
    };
}

